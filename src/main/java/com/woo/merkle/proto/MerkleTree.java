// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: merkle.proto

package com.woo.merkle.proto;

/**
 * Protobuf type {@code merkle.MerkleTree}
 */
public final class MerkleTree extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:merkle.MerkleTree)
    MerkleTreeOrBuilder {
private static final long serialVersionUID = 0L;
  // Use MerkleTree.newBuilder() to construct.
  private MerkleTree(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private MerkleTree() {
    tokens_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    nodes_ = java.util.Collections.emptyList();
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new MerkleTree();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Merkle.internal_static_merkle_MerkleTree_descriptor;
  }

  @Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Merkle.internal_static_merkle_MerkleTree_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            MerkleTree.class, Builder.class);
  }

  public static final int TOKENS_FIELD_NUMBER = 1;
  private com.google.protobuf.LazyStringList tokens_;
  /**
   * <pre>
   * token and its index
   * </pre>
   *
   * <code>repeated string tokens = 1;</code>
   * @return A list containing the tokens.
   */
  public com.google.protobuf.ProtocolStringList
      getTokensList() {
    return tokens_;
  }
  /**
   * <pre>
   * token and its index
   * </pre>
   *
   * <code>repeated string tokens = 1;</code>
   * @return The count of tokens.
   */
  public int getTokensCount() {
    return tokens_.size();
  }
  /**
   * <pre>
   * token and its index
   * </pre>
   *
   * <code>repeated string tokens = 1;</code>
   * @param index The index of the element to return.
   * @return The tokens at the given index.
   */
  public String getTokens(int index) {
    return tokens_.get(index);
  }
  /**
   * <pre>
   * token and its index
   * </pre>
   *
   * <code>repeated string tokens = 1;</code>
   * @param index The index of the value to return.
   * @return The bytes of the tokens at the given index.
   */
  public com.google.protobuf.ByteString
      getTokensBytes(int index) {
    return tokens_.getByteString(index);
  }

  public static final int NODES_FIELD_NUMBER = 2;
  private java.util.List<MerkleNode> nodes_;
  /**
   * <code>repeated .merkle.MerkleNode nodes = 2;</code>
   */
  @Override
  public java.util.List<MerkleNode> getNodesList() {
    return nodes_;
  }
  /**
   * <code>repeated .merkle.MerkleNode nodes = 2;</code>
   */
  @Override
  public java.util.List<? extends MerkleNodeOrBuilder>
      getNodesOrBuilderList() {
    return nodes_;
  }
  /**
   * <code>repeated .merkle.MerkleNode nodes = 2;</code>
   */
  @Override
  public int getNodesCount() {
    return nodes_.size();
  }
  /**
   * <code>repeated .merkle.MerkleNode nodes = 2;</code>
   */
  @Override
  public MerkleNode getNodes(int index) {
    return nodes_.get(index);
  }
  /**
   * <code>repeated .merkle.MerkleNode nodes = 2;</code>
   */
  @Override
  public MerkleNodeOrBuilder getNodesOrBuilder(
      int index) {
    return nodes_.get(index);
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    for (int i = 0; i < tokens_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 1, tokens_.getRaw(i));
    }
    for (int i = 0; i < nodes_.size(); i++) {
      output.writeMessage(2, nodes_.get(i));
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < tokens_.size(); i++) {
        dataSize += computeStringSizeNoTag(tokens_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getTokensList().size();
    }
    for (int i = 0; i < nodes_.size(); i++) {
      size += com.google.protobuf.CodedOutputStream
        .computeMessageSize(2, nodes_.get(i));
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof MerkleTree)) {
      return super.equals(obj);
    }
    MerkleTree other = (MerkleTree) obj;

    if (!getTokensList()
        .equals(other.getTokensList())) return false;
    if (!getNodesList()
        .equals(other.getNodesList())) return false;
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getTokensCount() > 0) {
      hash = (37 * hash) + TOKENS_FIELD_NUMBER;
      hash = (53 * hash) + getTokensList().hashCode();
    }
    if (getNodesCount() > 0) {
      hash = (37 * hash) + NODES_FIELD_NUMBER;
      hash = (53 * hash) + getNodesList().hashCode();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static MerkleTree parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static MerkleTree parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static MerkleTree parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static MerkleTree parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static MerkleTree parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static MerkleTree parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static MerkleTree parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static MerkleTree parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static MerkleTree parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static MerkleTree parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static MerkleTree parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static MerkleTree parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(MerkleTree prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code merkle.MerkleTree}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:merkle.MerkleTree)
      MerkleTreeOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Merkle.internal_static_merkle_MerkleTree_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Merkle.internal_static_merkle_MerkleTree_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              MerkleTree.class, Builder.class);
    }

    // Construct using com.woo.merkle.proto.MerkleTree.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      tokens_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      if (nodesBuilder_ == null) {
        nodes_ = java.util.Collections.emptyList();
      } else {
        nodes_ = null;
        nodesBuilder_.clear();
      }
      bitField0_ = (bitField0_ & ~0x00000002);
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Merkle.internal_static_merkle_MerkleTree_descriptor;
    }

    @Override
    public MerkleTree getDefaultInstanceForType() {
      return MerkleTree.getDefaultInstance();
    }

    @Override
    public MerkleTree build() {
      MerkleTree result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public MerkleTree buildPartial() {
      MerkleTree result = new MerkleTree(this);
      int from_bitField0_ = bitField0_;
      if (((bitField0_ & 0x00000001) != 0)) {
        tokens_ = tokens_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.tokens_ = tokens_;
      if (nodesBuilder_ == null) {
        if (((bitField0_ & 0x00000002) != 0)) {
          nodes_ = java.util.Collections.unmodifiableList(nodes_);
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.nodes_ = nodes_;
      } else {
        result.nodes_ = nodesBuilder_.build();
      }
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof MerkleTree) {
        return mergeFrom((MerkleTree)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(MerkleTree other) {
      if (other == MerkleTree.getDefaultInstance()) return this;
      if (!other.tokens_.isEmpty()) {
        if (tokens_.isEmpty()) {
          tokens_ = other.tokens_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureTokensIsMutable();
          tokens_.addAll(other.tokens_);
        }
        onChanged();
      }
      if (nodesBuilder_ == null) {
        if (!other.nodes_.isEmpty()) {
          if (nodes_.isEmpty()) {
            nodes_ = other.nodes_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureNodesIsMutable();
            nodes_.addAll(other.nodes_);
          }
          onChanged();
        }
      } else {
        if (!other.nodes_.isEmpty()) {
          if (nodesBuilder_.isEmpty()) {
            nodesBuilder_.dispose();
            nodesBuilder_ = null;
            nodes_ = other.nodes_;
            bitField0_ = (bitField0_ & ~0x00000002);
            nodesBuilder_ = 
              com.google.protobuf.GeneratedMessageV3.alwaysUseFieldBuilders ?
                 getNodesFieldBuilder() : null;
          } else {
            nodesBuilder_.addAllMessages(other.nodes_);
          }
        }
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              String s = input.readStringRequireUtf8();
              ensureTokensIsMutable();
              tokens_.add(s);
              break;
            } // case 10
            case 18: {
              MerkleNode m =
                  input.readMessage(
                      MerkleNode.parser(),
                      extensionRegistry);
              if (nodesBuilder_ == null) {
                ensureNodesIsMutable();
                nodes_.add(m);
              } else {
                nodesBuilder_.addMessage(m);
              }
              break;
            } // case 18
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.LazyStringList tokens_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureTokensIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        tokens_ = new com.google.protobuf.LazyStringArrayList(tokens_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * token and its index
     * </pre>
     *
     * <code>repeated string tokens = 1;</code>
     * @return A list containing the tokens.
     */
    public com.google.protobuf.ProtocolStringList
        getTokensList() {
      return tokens_.getUnmodifiableView();
    }
    /**
     * <pre>
     * token and its index
     * </pre>
     *
     * <code>repeated string tokens = 1;</code>
     * @return The count of tokens.
     */
    public int getTokensCount() {
      return tokens_.size();
    }
    /**
     * <pre>
     * token and its index
     * </pre>
     *
     * <code>repeated string tokens = 1;</code>
     * @param index The index of the element to return.
     * @return The tokens at the given index.
     */
    public String getTokens(int index) {
      return tokens_.get(index);
    }
    /**
     * <pre>
     * token and its index
     * </pre>
     *
     * <code>repeated string tokens = 1;</code>
     * @param index The index of the value to return.
     * @return The bytes of the tokens at the given index.
     */
    public com.google.protobuf.ByteString
        getTokensBytes(int index) {
      return tokens_.getByteString(index);
    }
    /**
     * <pre>
     * token and its index
     * </pre>
     *
     * <code>repeated string tokens = 1;</code>
     * @param index The index to set the value at.
     * @param value The tokens to set.
     * @return This builder for chaining.
     */
    public Builder setTokens(
        int index, String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTokensIsMutable();
      tokens_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * token and its index
     * </pre>
     *
     * <code>repeated string tokens = 1;</code>
     * @param value The tokens to add.
     * @return This builder for chaining.
     */
    public Builder addTokens(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureTokensIsMutable();
      tokens_.add(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * token and its index
     * </pre>
     *
     * <code>repeated string tokens = 1;</code>
     * @param values The tokens to add.
     * @return This builder for chaining.
     */
    public Builder addAllTokens(
        Iterable<String> values) {
      ensureTokensIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, tokens_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * token and its index
     * </pre>
     *
     * <code>repeated string tokens = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearTokens() {
      tokens_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * token and its index
     * </pre>
     *
     * <code>repeated string tokens = 1;</code>
     * @param value The bytes of the tokens to add.
     * @return This builder for chaining.
     */
    public Builder addTokensBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureTokensIsMutable();
      tokens_.add(value);
      onChanged();
      return this;
    }

    private java.util.List<MerkleNode> nodes_ =
      java.util.Collections.emptyList();
    private void ensureNodesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        nodes_ = new java.util.ArrayList<MerkleNode>(nodes_);
        bitField0_ |= 0x00000002;
       }
    }

    private com.google.protobuf.RepeatedFieldBuilderV3<
        MerkleNode, MerkleNode.Builder, MerkleNodeOrBuilder> nodesBuilder_;

    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public java.util.List<MerkleNode> getNodesList() {
      if (nodesBuilder_ == null) {
        return java.util.Collections.unmodifiableList(nodes_);
      } else {
        return nodesBuilder_.getMessageList();
      }
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public int getNodesCount() {
      if (nodesBuilder_ == null) {
        return nodes_.size();
      } else {
        return nodesBuilder_.getCount();
      }
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public MerkleNode getNodes(int index) {
      if (nodesBuilder_ == null) {
        return nodes_.get(index);
      } else {
        return nodesBuilder_.getMessage(index);
      }
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public Builder setNodes(
        int index, MerkleNode value) {
      if (nodesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNodesIsMutable();
        nodes_.set(index, value);
        onChanged();
      } else {
        nodesBuilder_.setMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public Builder setNodes(
        int index, MerkleNode.Builder builderForValue) {
      if (nodesBuilder_ == null) {
        ensureNodesIsMutable();
        nodes_.set(index, builderForValue.build());
        onChanged();
      } else {
        nodesBuilder_.setMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public Builder addNodes(MerkleNode value) {
      if (nodesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNodesIsMutable();
        nodes_.add(value);
        onChanged();
      } else {
        nodesBuilder_.addMessage(value);
      }
      return this;
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public Builder addNodes(
        int index, MerkleNode value) {
      if (nodesBuilder_ == null) {
        if (value == null) {
          throw new NullPointerException();
        }
        ensureNodesIsMutable();
        nodes_.add(index, value);
        onChanged();
      } else {
        nodesBuilder_.addMessage(index, value);
      }
      return this;
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public Builder addNodes(
        MerkleNode.Builder builderForValue) {
      if (nodesBuilder_ == null) {
        ensureNodesIsMutable();
        nodes_.add(builderForValue.build());
        onChanged();
      } else {
        nodesBuilder_.addMessage(builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public Builder addNodes(
        int index, MerkleNode.Builder builderForValue) {
      if (nodesBuilder_ == null) {
        ensureNodesIsMutable();
        nodes_.add(index, builderForValue.build());
        onChanged();
      } else {
        nodesBuilder_.addMessage(index, builderForValue.build());
      }
      return this;
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public Builder addAllNodes(
        Iterable<? extends MerkleNode> values) {
      if (nodesBuilder_ == null) {
        ensureNodesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, nodes_);
        onChanged();
      } else {
        nodesBuilder_.addAllMessages(values);
      }
      return this;
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public Builder clearNodes() {
      if (nodesBuilder_ == null) {
        nodes_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
      } else {
        nodesBuilder_.clear();
      }
      return this;
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public Builder removeNodes(int index) {
      if (nodesBuilder_ == null) {
        ensureNodesIsMutable();
        nodes_.remove(index);
        onChanged();
      } else {
        nodesBuilder_.remove(index);
      }
      return this;
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public MerkleNode.Builder getNodesBuilder(
        int index) {
      return getNodesFieldBuilder().getBuilder(index);
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public MerkleNodeOrBuilder getNodesOrBuilder(
        int index) {
      if (nodesBuilder_ == null) {
        return nodes_.get(index);  } else {
        return nodesBuilder_.getMessageOrBuilder(index);
      }
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public java.util.List<? extends MerkleNodeOrBuilder>
         getNodesOrBuilderList() {
      if (nodesBuilder_ != null) {
        return nodesBuilder_.getMessageOrBuilderList();
      } else {
        return java.util.Collections.unmodifiableList(nodes_);
      }
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public MerkleNode.Builder addNodesBuilder() {
      return getNodesFieldBuilder().addBuilder(
          MerkleNode.getDefaultInstance());
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public MerkleNode.Builder addNodesBuilder(
        int index) {
      return getNodesFieldBuilder().addBuilder(
          index, MerkleNode.getDefaultInstance());
    }
    /**
     * <code>repeated .merkle.MerkleNode nodes = 2;</code>
     */
    public java.util.List<MerkleNode.Builder>
         getNodesBuilderList() {
      return getNodesFieldBuilder().getBuilderList();
    }
    private com.google.protobuf.RepeatedFieldBuilderV3<
        MerkleNode, MerkleNode.Builder, MerkleNodeOrBuilder>
        getNodesFieldBuilder() {
      if (nodesBuilder_ == null) {
        nodesBuilder_ = new com.google.protobuf.RepeatedFieldBuilderV3<
            MerkleNode, MerkleNode.Builder, MerkleNodeOrBuilder>(
                nodes_,
                ((bitField0_ & 0x00000002) != 0),
                getParentForChildren(),
                isClean());
        nodes_ = null;
      }
      return nodesBuilder_;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:merkle.MerkleTree)
  }

  // @@protoc_insertion_point(class_scope:merkle.MerkleTree)
  private static final MerkleTree DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new MerkleTree();
  }

  public static MerkleTree getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MerkleTree>
      PARSER = new com.google.protobuf.AbstractParser<MerkleTree>() {
    @Override
    public MerkleTree parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<MerkleTree> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<MerkleTree> getParserForType() {
    return PARSER;
  }

  @Override
  public MerkleTree getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

