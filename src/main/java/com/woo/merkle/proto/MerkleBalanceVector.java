// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: merkle.proto

package com.woo.merkle.proto;

/**
 * Protobuf type {@code merkle.MerkleBalanceVector}
 */
public final class MerkleBalanceVector extends
    com.google.protobuf.GeneratedMessageV3 implements
    // @@protoc_insertion_point(message_implements:merkle.MerkleBalanceVector)
    MerkleBalanceVectorOrBuilder {
private static final long serialVersionUID = 0L;
  // Use MerkleBalanceVector.newBuilder() to construct.
  private MerkleBalanceVector(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
    super(builder);
  }
  private MerkleBalanceVector() {
    index_ = emptyIntList();
    balances_ = com.google.protobuf.LazyStringArrayList.EMPTY;
  }

  @Override
  @SuppressWarnings({"unused"})
  protected Object newInstance(
      UnusedPrivateParameter unused) {
    return new MerkleBalanceVector();
  }

  @Override
  public final com.google.protobuf.UnknownFieldSet
  getUnknownFields() {
    return this.unknownFields;
  }
  public static final com.google.protobuf.Descriptors.Descriptor
      getDescriptor() {
    return Merkle.internal_static_merkle_MerkleBalanceVector_descriptor;
  }

  @Override
  protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internalGetFieldAccessorTable() {
    return Merkle.internal_static_merkle_MerkleBalanceVector_fieldAccessorTable
        .ensureFieldAccessorsInitialized(
            MerkleBalanceVector.class, Builder.class);
  }

  private int bitField0_;
  public static final int INDEX_FIELD_NUMBER = 1;
  private com.google.protobuf.Internal.IntList index_;
  /**
   * <pre>
   * make sure index is ascending order, so that hash always is the same
   * </pre>
   *
   * <code>repeated int32 index = 1;</code>
   * @return A list containing the index.
   */
  @Override
  public java.util.List<Integer>
      getIndexList() {
    return index_;
  }
  /**
   * <pre>
   * make sure index is ascending order, so that hash always is the same
   * </pre>
   *
   * <code>repeated int32 index = 1;</code>
   * @return The count of index.
   */
  public int getIndexCount() {
    return index_.size();
  }
  /**
   * <pre>
   * make sure index is ascending order, so that hash always is the same
   * </pre>
   *
   * <code>repeated int32 index = 1;</code>
   * @param index The index of the element to return.
   * @return The index at the given index.
   */
  public int getIndex(int index) {
    return index_.getInt(index);
  }
  private int indexMemoizedSerializedSize = -1;

  public static final int BALANCES_FIELD_NUMBER = 2;
  private com.google.protobuf.LazyStringList balances_;
  /**
   * <code>repeated string balances = 2;</code>
   * @return A list containing the balances.
   */
  public com.google.protobuf.ProtocolStringList
      getBalancesList() {
    return balances_;
  }
  /**
   * <code>repeated string balances = 2;</code>
   * @return The count of balances.
   */
  public int getBalancesCount() {
    return balances_.size();
  }
  /**
   * <code>repeated string balances = 2;</code>
   * @param index The index of the element to return.
   * @return The balances at the given index.
   */
  public String getBalances(int index) {
    return balances_.get(index);
  }
  /**
   * <code>repeated string balances = 2;</code>
   * @param index The index of the value to return.
   * @return The bytes of the balances at the given index.
   */
  public com.google.protobuf.ByteString
      getBalancesBytes(int index) {
    return balances_.getByteString(index);
  }

  public static final int LEAFIDNEX_FIELD_NUMBER = 3;
  private int leafIdnex_;
  /**
   * <code>optional int32 leafIdnex = 3;</code>
   * @return Whether the leafIdnex field is set.
   */
  @Override
  public boolean hasLeafIdnex() {
    return ((bitField0_ & 0x00000001) != 0);
  }
  /**
   * <code>optional int32 leafIdnex = 3;</code>
   * @return The leafIdnex.
   */
  @Override
  public int getLeafIdnex() {
    return leafIdnex_;
  }

  private byte memoizedIsInitialized = -1;
  @Override
  public final boolean isInitialized() {
    byte isInitialized = memoizedIsInitialized;
    if (isInitialized == 1) return true;
    if (isInitialized == 0) return false;

    memoizedIsInitialized = 1;
    return true;
  }

  @Override
  public void writeTo(com.google.protobuf.CodedOutputStream output)
                      throws java.io.IOException {
    getSerializedSize();
    if (getIndexList().size() > 0) {
      output.writeUInt32NoTag(10);
      output.writeUInt32NoTag(indexMemoizedSerializedSize);
    }
    for (int i = 0; i < index_.size(); i++) {
      output.writeInt32NoTag(index_.getInt(i));
    }
    for (int i = 0; i < balances_.size(); i++) {
      com.google.protobuf.GeneratedMessageV3.writeString(output, 2, balances_.getRaw(i));
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      output.writeInt32(3, leafIdnex_);
    }
    getUnknownFields().writeTo(output);
  }

  @Override
  public int getSerializedSize() {
    int size = memoizedSize;
    if (size != -1) return size;

    size = 0;
    {
      int dataSize = 0;
      for (int i = 0; i < index_.size(); i++) {
        dataSize += com.google.protobuf.CodedOutputStream
          .computeInt32SizeNoTag(index_.getInt(i));
      }
      size += dataSize;
      if (!getIndexList().isEmpty()) {
        size += 1;
        size += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(dataSize);
      }
      indexMemoizedSerializedSize = dataSize;
    }
    {
      int dataSize = 0;
      for (int i = 0; i < balances_.size(); i++) {
        dataSize += computeStringSizeNoTag(balances_.getRaw(i));
      }
      size += dataSize;
      size += 1 * getBalancesList().size();
    }
    if (((bitField0_ & 0x00000001) != 0)) {
      size += com.google.protobuf.CodedOutputStream
        .computeInt32Size(3, leafIdnex_);
    }
    size += getUnknownFields().getSerializedSize();
    memoizedSize = size;
    return size;
  }

  @Override
  public boolean equals(final Object obj) {
    if (obj == this) {
     return true;
    }
    if (!(obj instanceof MerkleBalanceVector)) {
      return super.equals(obj);
    }
    MerkleBalanceVector other = (MerkleBalanceVector) obj;

    if (!getIndexList()
        .equals(other.getIndexList())) return false;
    if (!getBalancesList()
        .equals(other.getBalancesList())) return false;
    if (hasLeafIdnex() != other.hasLeafIdnex()) return false;
    if (hasLeafIdnex()) {
      if (getLeafIdnex()
          != other.getLeafIdnex()) return false;
    }
    if (!getUnknownFields().equals(other.getUnknownFields())) return false;
    return true;
  }

  @Override
  public int hashCode() {
    if (memoizedHashCode != 0) {
      return memoizedHashCode;
    }
    int hash = 41;
    hash = (19 * hash) + getDescriptor().hashCode();
    if (getIndexCount() > 0) {
      hash = (37 * hash) + INDEX_FIELD_NUMBER;
      hash = (53 * hash) + getIndexList().hashCode();
    }
    if (getBalancesCount() > 0) {
      hash = (37 * hash) + BALANCES_FIELD_NUMBER;
      hash = (53 * hash) + getBalancesList().hashCode();
    }
    if (hasLeafIdnex()) {
      hash = (37 * hash) + LEAFIDNEX_FIELD_NUMBER;
      hash = (53 * hash) + getLeafIdnex();
    }
    hash = (29 * hash) + getUnknownFields().hashCode();
    memoizedHashCode = hash;
    return hash;
  }

  public static MerkleBalanceVector parseFrom(
      java.nio.ByteBuffer data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static MerkleBalanceVector parseFrom(
      java.nio.ByteBuffer data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static MerkleBalanceVector parseFrom(
      com.google.protobuf.ByteString data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static MerkleBalanceVector parseFrom(
      com.google.protobuf.ByteString data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static MerkleBalanceVector parseFrom(byte[] data)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data);
  }
  public static MerkleBalanceVector parseFrom(
      byte[] data,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws com.google.protobuf.InvalidProtocolBufferException {
    return PARSER.parseFrom(data, extensionRegistry);
  }
  public static MerkleBalanceVector parseFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static MerkleBalanceVector parseFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }
  public static MerkleBalanceVector parseDelimitedFrom(java.io.InputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input);
  }
  public static MerkleBalanceVector parseDelimitedFrom(
      java.io.InputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
  }
  public static MerkleBalanceVector parseFrom(
      com.google.protobuf.CodedInputStream input)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input);
  }
  public static MerkleBalanceVector parseFrom(
      com.google.protobuf.CodedInputStream input,
      com.google.protobuf.ExtensionRegistryLite extensionRegistry)
      throws java.io.IOException {
    return com.google.protobuf.GeneratedMessageV3
        .parseWithIOException(PARSER, input, extensionRegistry);
  }

  @Override
  public Builder newBuilderForType() { return newBuilder(); }
  public static Builder newBuilder() {
    return DEFAULT_INSTANCE.toBuilder();
  }
  public static Builder newBuilder(MerkleBalanceVector prototype) {
    return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
  }
  @Override
  public Builder toBuilder() {
    return this == DEFAULT_INSTANCE
        ? new Builder() : new Builder().mergeFrom(this);
  }

  @Override
  protected Builder newBuilderForType(
      com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
    Builder builder = new Builder(parent);
    return builder;
  }
  /**
   * Protobuf type {@code merkle.MerkleBalanceVector}
   */
  public static final class Builder extends
      com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
      // @@protoc_insertion_point(builder_implements:merkle.MerkleBalanceVector)
      MerkleBalanceVectorOrBuilder {
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return Merkle.internal_static_merkle_MerkleBalanceVector_descriptor;
    }

    @Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return Merkle.internal_static_merkle_MerkleBalanceVector_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              MerkleBalanceVector.class, Builder.class);
    }

    // Construct using com.woo.merkle.proto.MerkleBalanceVector.newBuilder()
    private Builder() {

    }

    private Builder(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      super(parent);

    }
    @Override
    public Builder clear() {
      super.clear();
      index_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000001);
      balances_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      leafIdnex_ = 0;
      bitField0_ = (bitField0_ & ~0x00000004);
      return this;
    }

    @Override
    public com.google.protobuf.Descriptors.Descriptor
        getDescriptorForType() {
      return Merkle.internal_static_merkle_MerkleBalanceVector_descriptor;
    }

    @Override
    public MerkleBalanceVector getDefaultInstanceForType() {
      return MerkleBalanceVector.getDefaultInstance();
    }

    @Override
    public MerkleBalanceVector build() {
      MerkleBalanceVector result = buildPartial();
      if (!result.isInitialized()) {
        throw newUninitializedMessageException(result);
      }
      return result;
    }

    @Override
    public MerkleBalanceVector buildPartial() {
      MerkleBalanceVector result = new MerkleBalanceVector(this);
      int from_bitField0_ = bitField0_;
      int to_bitField0_ = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        index_.makeImmutable();
        bitField0_ = (bitField0_ & ~0x00000001);
      }
      result.index_ = index_;
      if (((bitField0_ & 0x00000002) != 0)) {
        balances_ = balances_.getUnmodifiableView();
        bitField0_ = (bitField0_ & ~0x00000002);
      }
      result.balances_ = balances_;
      if (((from_bitField0_ & 0x00000004) != 0)) {
        result.leafIdnex_ = leafIdnex_;
        to_bitField0_ |= 0x00000001;
      }
      result.bitField0_ = to_bitField0_;
      onBuilt();
      return result;
    }

    @Override
    public Builder clone() {
      return super.clone();
    }
    @Override
    public Builder setField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.setField(field, value);
    }
    @Override
    public Builder clearField(
        com.google.protobuf.Descriptors.FieldDescriptor field) {
      return super.clearField(field);
    }
    @Override
    public Builder clearOneof(
        com.google.protobuf.Descriptors.OneofDescriptor oneof) {
      return super.clearOneof(oneof);
    }
    @Override
    public Builder setRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        int index, Object value) {
      return super.setRepeatedField(field, index, value);
    }
    @Override
    public Builder addRepeatedField(
        com.google.protobuf.Descriptors.FieldDescriptor field,
        Object value) {
      return super.addRepeatedField(field, value);
    }
    @Override
    public Builder mergeFrom(com.google.protobuf.Message other) {
      if (other instanceof MerkleBalanceVector) {
        return mergeFrom((MerkleBalanceVector)other);
      } else {
        super.mergeFrom(other);
        return this;
      }
    }

    public Builder mergeFrom(MerkleBalanceVector other) {
      if (other == MerkleBalanceVector.getDefaultInstance()) return this;
      if (!other.index_.isEmpty()) {
        if (index_.isEmpty()) {
          index_ = other.index_;
          bitField0_ = (bitField0_ & ~0x00000001);
        } else {
          ensureIndexIsMutable();
          index_.addAll(other.index_);
        }
        onChanged();
      }
      if (!other.balances_.isEmpty()) {
        if (balances_.isEmpty()) {
          balances_ = other.balances_;
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          ensureBalancesIsMutable();
          balances_.addAll(other.balances_);
        }
        onChanged();
      }
      if (other.hasLeafIdnex()) {
        setLeafIdnex(other.getLeafIdnex());
      }
      this.mergeUnknownFields(other.getUnknownFields());
      onChanged();
      return this;
    }

    @Override
    public final boolean isInitialized() {
      return true;
    }

    @Override
    public Builder mergeFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      if (extensionRegistry == null) {
        throw new NullPointerException();
      }
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 8: {
              int v = input.readInt32();
              ensureIndexIsMutable();
              index_.addInt(v);
              break;
            } // case 8
            case 10: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              ensureIndexIsMutable();
              while (input.getBytesUntilLimit() > 0) {
                index_.addInt(input.readInt32());
              }
              input.popLimit(limit);
              break;
            } // case 10
            case 18: {
              String s = input.readStringRequireUtf8();
              ensureBalancesIsMutable();
              balances_.add(s);
              break;
            } // case 18
            case 24: {
              leafIdnex_ = input.readInt32();
              bitField0_ |= 0x00000004;
              break;
            } // case 24
            default: {
              if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                done = true; // was an endgroup tag
              }
              break;
            } // default:
          } // switch (tag)
        } // while (!done)
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.unwrapIOException();
      } finally {
        onChanged();
      } // finally
      return this;
    }
    private int bitField0_;

    private com.google.protobuf.Internal.IntList index_ = emptyIntList();
    private void ensureIndexIsMutable() {
      if (!((bitField0_ & 0x00000001) != 0)) {
        index_ = mutableCopy(index_);
        bitField0_ |= 0x00000001;
       }
    }
    /**
     * <pre>
     * make sure index is ascending order, so that hash always is the same
     * </pre>
     *
     * <code>repeated int32 index = 1;</code>
     * @return A list containing the index.
     */
    public java.util.List<Integer>
        getIndexList() {
      return ((bitField0_ & 0x00000001) != 0) ?
               java.util.Collections.unmodifiableList(index_) : index_;
    }
    /**
     * <pre>
     * make sure index is ascending order, so that hash always is the same
     * </pre>
     *
     * <code>repeated int32 index = 1;</code>
     * @return The count of index.
     */
    public int getIndexCount() {
      return index_.size();
    }
    /**
     * <pre>
     * make sure index is ascending order, so that hash always is the same
     * </pre>
     *
     * <code>repeated int32 index = 1;</code>
     * @param index The index of the element to return.
     * @return The index at the given index.
     */
    public int getIndex(int index) {
      return index_.getInt(index);
    }
    /**
     * <pre>
     * make sure index is ascending order, so that hash always is the same
     * </pre>
     *
     * <code>repeated int32 index = 1;</code>
     * @param index The index to set the value at.
     * @param value The index to set.
     * @return This builder for chaining.
     */
    public Builder setIndex(
        int index, int value) {
      ensureIndexIsMutable();
      index_.setInt(index, value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * make sure index is ascending order, so that hash always is the same
     * </pre>
     *
     * <code>repeated int32 index = 1;</code>
     * @param value The index to add.
     * @return This builder for chaining.
     */
    public Builder addIndex(int value) {
      ensureIndexIsMutable();
      index_.addInt(value);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * make sure index is ascending order, so that hash always is the same
     * </pre>
     *
     * <code>repeated int32 index = 1;</code>
     * @param values The index to add.
     * @return This builder for chaining.
     */
    public Builder addAllIndex(
        Iterable<? extends Integer> values) {
      ensureIndexIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, index_);
      onChanged();
      return this;
    }
    /**
     * <pre>
     * make sure index is ascending order, so that hash always is the same
     * </pre>
     *
     * <code>repeated int32 index = 1;</code>
     * @return This builder for chaining.
     */
    public Builder clearIndex() {
      index_ = emptyIntList();
      bitField0_ = (bitField0_ & ~0x00000001);
      onChanged();
      return this;
    }

    private com.google.protobuf.LazyStringList balances_ = com.google.protobuf.LazyStringArrayList.EMPTY;
    private void ensureBalancesIsMutable() {
      if (!((bitField0_ & 0x00000002) != 0)) {
        balances_ = new com.google.protobuf.LazyStringArrayList(balances_);
        bitField0_ |= 0x00000002;
       }
    }
    /**
     * <code>repeated string balances = 2;</code>
     * @return A list containing the balances.
     */
    public com.google.protobuf.ProtocolStringList
        getBalancesList() {
      return balances_.getUnmodifiableView();
    }
    /**
     * <code>repeated string balances = 2;</code>
     * @return The count of balances.
     */
    public int getBalancesCount() {
      return balances_.size();
    }
    /**
     * <code>repeated string balances = 2;</code>
     * @param index The index of the element to return.
     * @return The balances at the given index.
     */
    public String getBalances(int index) {
      return balances_.get(index);
    }
    /**
     * <code>repeated string balances = 2;</code>
     * @param index The index of the value to return.
     * @return The bytes of the balances at the given index.
     */
    public com.google.protobuf.ByteString
        getBalancesBytes(int index) {
      return balances_.getByteString(index);
    }
    /**
     * <code>repeated string balances = 2;</code>
     * @param index The index to set the value at.
     * @param value The balances to set.
     * @return This builder for chaining.
     */
    public Builder setBalances(
        int index, String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureBalancesIsMutable();
      balances_.set(index, value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string balances = 2;</code>
     * @param value The balances to add.
     * @return This builder for chaining.
     */
    public Builder addBalances(
        String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  ensureBalancesIsMutable();
      balances_.add(value);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string balances = 2;</code>
     * @param values The balances to add.
     * @return This builder for chaining.
     */
    public Builder addAllBalances(
        Iterable<String> values) {
      ensureBalancesIsMutable();
      com.google.protobuf.AbstractMessageLite.Builder.addAll(
          values, balances_);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string balances = 2;</code>
     * @return This builder for chaining.
     */
    public Builder clearBalances() {
      balances_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      bitField0_ = (bitField0_ & ~0x00000002);
      onChanged();
      return this;
    }
    /**
     * <code>repeated string balances = 2;</code>
     * @param value The bytes of the balances to add.
     * @return This builder for chaining.
     */
    public Builder addBalancesBytes(
        com.google.protobuf.ByteString value) {
      if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
      ensureBalancesIsMutable();
      balances_.add(value);
      onChanged();
      return this;
    }

    private int leafIdnex_ ;
    /**
     * <code>optional int32 leafIdnex = 3;</code>
     * @return Whether the leafIdnex field is set.
     */
    @Override
    public boolean hasLeafIdnex() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional int32 leafIdnex = 3;</code>
     * @return The leafIdnex.
     */
    @Override
    public int getLeafIdnex() {
      return leafIdnex_;
    }
    /**
     * <code>optional int32 leafIdnex = 3;</code>
     * @param value The leafIdnex to set.
     * @return This builder for chaining.
     */
    public Builder setLeafIdnex(int value) {
      bitField0_ |= 0x00000004;
      leafIdnex_ = value;
      onChanged();
      return this;
    }
    /**
     * <code>optional int32 leafIdnex = 3;</code>
     * @return This builder for chaining.
     */
    public Builder clearLeafIdnex() {
      bitField0_ = (bitField0_ & ~0x00000004);
      leafIdnex_ = 0;
      onChanged();
      return this;
    }
    @Override
    public final Builder setUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.setUnknownFields(unknownFields);
    }

    @Override
    public final Builder mergeUnknownFields(
        final com.google.protobuf.UnknownFieldSet unknownFields) {
      return super.mergeUnknownFields(unknownFields);
    }


    // @@protoc_insertion_point(builder_scope:merkle.MerkleBalanceVector)
  }

  // @@protoc_insertion_point(class_scope:merkle.MerkleBalanceVector)
  private static final MerkleBalanceVector DEFAULT_INSTANCE;
  static {
    DEFAULT_INSTANCE = new MerkleBalanceVector();
  }

  public static MerkleBalanceVector getDefaultInstance() {
    return DEFAULT_INSTANCE;
  }

  private static final com.google.protobuf.Parser<MerkleBalanceVector>
      PARSER = new com.google.protobuf.AbstractParser<MerkleBalanceVector>() {
    @Override
    public MerkleBalanceVector parsePartialFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      Builder builder = newBuilder();
      try {
        builder.mergeFrom(input, extensionRegistry);
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(builder.buildPartial());
      } catch (com.google.protobuf.UninitializedMessageException e) {
        throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(e)
            .setUnfinishedMessage(builder.buildPartial());
      }
      return builder.buildPartial();
    }
  };

  public static com.google.protobuf.Parser<MerkleBalanceVector> parser() {
    return PARSER;
  }

  @Override
  public com.google.protobuf.Parser<MerkleBalanceVector> getParserForType() {
    return PARSER;
  }

  @Override
  public MerkleBalanceVector getDefaultInstanceForType() {
    return DEFAULT_INSTANCE;
  }

}

